//    @Bean
//    protected ReactiveJwtAuthenticationConverter jwtAuthenticationConverter() {
//        ReactiveJwtAuthenticationConverter converter = new ReactiveJwtAuthenticationConverter();
//        converter.setJwtGrantedAuthoritiesConverter(jwt -> {
//            List<String> authorities = jwt.getClaimAsStringList("authorities");
//            if (authorities == null || authorities.isEmpty()) {
//                return Flux.empty();
//            }
//            return Flux.fromIterable(authorities.stream()
//                    .map(role -> role.startsWith("ROLE_") ? role : "ROLE_" + role)
//                    .map(SimpleGrantedAuthority::new)
//                    .toList());
//        });
//        return converter;
//    }

------------------------------------------------------------------------------------------------------------------------

                            .permitAll()
                        .pathMatchers("/api/security/web/hash-password")
                                .authenticated()
//                            .access((mono, _) -> mono
//                                    .map(auth -> auth
//                                            .getAuthorities().stream()
//                                            .anyMatch(grantedAuthority ->
//                                                    grantedAuthority.getAuthority().equals("ROLE_SYSTEM") ||
//                                                    grantedAuthority.getAuthority().equals("DO_INTERNAL_TASKS")))
//                                    .map(AuthorizationDecision::new))

------------------------------------------------------------------------------------------------------------------------

//        String authHeader = exchange.getRequest().getHeaders().getFirst(AUTHORIZATION);
//        if (authHeader ==  null || !authHeader.startsWith("Bearer ")) {
//            return chain.filter(exchange);
//        }
//
//            String token = authHeader.substring(7);
//            return jwtTokenValidator.validateInternalToken(token)
//                    .flatMap(jwt -> {
//                        log.info("Authenticating service: {}",  jwt.getSubject());
//                        log.info("Authorities: {}", (Object) jwt.getClaim("authorities"));
//                        return chain.filter(exchange);
//                    })
//                    .onErrorResume(error -> {
//                        log.error("Authentication failed: {}", error.getMessage());
//                        exchange.getResponse().setStatusCode(UNAUTHORIZED);
//                        return exchange.getResponse().setComplete();
//                    });

------------------------------------------------------------------------------------------------------------------------

return Mono.just(token)
                .flatMap(t -> jwtDecoder.decode(t)
                        .doOnNext(jwt -> {
                            log.info("Internal token successfully decoded: {}", jwt);
                            log.info("Token claims: {}", jwt.getClaims());
                            log.info("Token headers: {}", jwt.getHeaders());
                        }))
                .doOnSuccess(jwt -> log.debug("Valid JWT for subject {}", jwt.getSubject()))
                .doOnError(error -> log.error("JWT validation failed",  error))
                .onErrorMap(error -> new OAuth2AuthenticationException(
                        new OAuth2Error("invalid_token", error.getMessage(), null),
                        "JWT validation failed"));

------------------------------------------------------------------------------------------------------------------------

return exchange ->
                Mono.just(exchange.getRequest().getPath().value())
                        .flatMap(path -> {
                            for (String ignore : CSRF_IGNORE) {
                                if (path.matches(ignore.replace("**", ""))) {
                                    return ServerWebExchangeMatcher.MatchResult.notMatch();
                                }
                            }
                            return ServerWebExchangeMatcher.MatchResult.match();
                        });

------------------------------------------------------------------------------------------------------------------------

//    @GetMapping(value = "/jwks.json", produces = MediaType.APPLICATION_JSON_VALUE)
//    public Mono<ResponseEntity<Map<String, Object>>> getJwkSet() {
//        ECPublicKey ecPublicKey = (ECPublicKey) keyProviderStrategy.getPublicKey();
//
//        ECKey ecKey = new ECKey.Builder(Curve.P_256, ecPublicKey)
//                .keyUse(KeyUse.SIGNATURE)
//                .algorithm(JWSAlgorithm.ES256)
//                .keyID(keyProviderStrategy.getKeyId())
//                .build();
//
//        JWKSet jwkSet = new JWKSet(ecKey);
//        Map<String, Object> jwkJson = jwkSet.toJSONObject();
//        log.info("JWK JSON: {}", jwkJson);
//
//        return Mono.just(ResponseEntity.ok(jwkJson));
//    }

------------------------------------------------------------------------------------------------------------------------

        var type = TokenType.INTERNAL_JWT_TOKEN;
        var credentials = tokenSigningKeyManager.getSigningCredentials(type);
        var issuedAt = new Date();
        var expiration = new Date(issuedAt.getTime() + tokenSigningKeyManager.getTokenExpiration(type));

        var builder = Jwts.builder()
                .subject(JwtTokenFactory.class.getSimpleName())
                .issuer("bank-security service")
                .issuedAt(issuedAt)
                .expiration(expiration)
                .audience().add("Internal communication Token")
                .and()
                .claim("authorities", List.of("ROLE_SYSTEM", "DO_INTERNAL_TASKS"))
                .id(UUID.randomUUID().toString())
                .header().keyId(keyProviderStrategy.getKeyId());
        return credentials.sign((JwtBuilder) builder).compact();

------------------------------------------------------------------------------------------------------------------------

        ECPrivateKey privateKey = (ECPrivateKey) keyProviderStrategy.getPrivateKey();
        String keyId = keyProviderStrategy.getKeyId();

        Instant now = Instant.now();
        Instant expiry = now.plusSeconds(600);

        JWTClaimsSet claims = new JWTClaimsSet.Builder()
                .subject(JwtTokenFactory.class.getSimpleName())
                .issuer("bank-security service")
                .issueTime(Date.from(now))
                .expirationTime(Date.from(expiry))
                .audience("Internal communication Token")
                .claim("authorities", List.of("ROLE_SYSTEM", "DO_INTERNAL_TASKS"))
                .jwtID(UUID.randomUUID().toString())
                .build();

        SignedJWT signedJWT = new SignedJWT(
                new JWSHeader.Builder(JWSAlgorithm.ES256)
                        .keyID(keyId)
                        .type(JOSEObjectType.JWT)
                        .build(),
                claims
        );

        try {
            signedJWT.sign(new ECDSASigner(privateKey));
        } catch (JOSEException ex) {
            throw new IllegalStateException("Failed to sign JWT", ex);
        }
        return signedJWT.serialize();

------------------------------------------------------------------------------------------------------------------------

#spring:
#  r2dbc:
#    url: r2dbc:postgresql://localhost:5432/security_db
#    username: security_owner
#    password: security_owner
#
#  flyway:
#    enabled: true
#    url: jdbc:postgresql://localhost:5432/security_db
#    user: security_owner
#    password: security_owner
#    locations: classpath:db/migration
#    driver-class-name: org.postgresql.Driver
#    schemas: security
#    default-schema: security
#
#security:
#  service:
#    url: http://localhost:8989
#
#  argon2:
#    memory: 65536 # Use 64 MB of memory
#    iterations: 3 # Run 3 iterations
#    parallelism: 2 # Use 2 threads
#    hashLength: 64 # Generate a 64 byte (512 bit) hash
#    salt: ${ARGON2_SALT_FOR_BANK}
#    secretKey: ${ARGON2_SECRET_KEY_FOR_BANK}
#  token:
#    jwt:
#      keystore:
#        path: /Users/artyom_aroyan/.keys/.bankapp/JWT/keystore.p12
#        alias: ${BANK_KEYSTORE_ALIAS}
#        password: ${BANK_KEYSTORE_PASSWORD}
#        expiration: 720 # expiration in minutes
#    access:
#      password-recovery:
#        secret: ${PASSWORD_RESET_TOKEN_SECRET_FOR_BANK}
#        expiration: 3 # expiration in minutes
#      email-verification:
#        secret: ${EMAIL_VERIFICATION_TOKEN_SECRET_FOR_BANK}
#        expiration: 15 # expiration in minutes

------------------------------------------------------------------------------------------------------------------------

        String secret = request.getHeaders().getFirst("X-Internal-Secret");

        if (!internalSecretProperties.secret().equals(secret)) {
            log.warn("Invalid internal secret from {}", request.getRemoteAddress());
            return Mono.just(ResponseEntity.status(FORBIDDEN).body("Invalid internal secret"));
        }
        return Mono.fromSupplier(jwtTokenService::generateSystemToken)
                .doOnNext(token -> {
                    if (token == null || token.isEmpty() || token.trim().isBlank()) {
                        log.error("Generated empty system token");
                        throw new EmptyTokenException("Generated empty system token");
                    }
                    log.info("Generated internal system token: {}", token);
                })
                .map(ResponseEntity::ok)
                .onErrorResume(error -> {
                    log.error("Error during internal token generation: {}", error.getMessage(), error);
                    return Mono.just(ResponseEntity.status(INTERNAL_SERVER_ERROR).body("Failed to generate internal system token"));
                });

------------------------------------------------------------------------------------------------------------------------

//        return Mono.justOrEmpty(request.getHeaders().getFirst("X-Internal-Secret"))
//                .flatMap(secret -> {
//                    if (!internalSecretValidator.isValid(secret)) {
//                        log.warn("Invalid internal secret from {}", request.getRemoteAddress());
//                        return Mono.just(ResponseEntity.status(FORBIDDEN).body("Invalid internal secret"));
//                    }
//
//                    return jwtTokenService.generateSystemToken()
//                            .map(ResponseEntity::ok)
//                            .onErrorResume(error -> {
//                                log.error("Token generation failed: {}", error.getMessage(), error);
//                                return Mono.just(ResponseEntity.status(INTERNAL_SERVER_ERROR).body("Failed to generate token"));
//                            });
//                })
//
//                .switchIfEmpty(Mono.defer(() -> {
//                    log.warn("Missing X-Internal-Secret header from {}",  request.getRemoteAddress());
//                    return Mono.just(ResponseEntity.status(INTERNAL_SERVER_ERROR).body("Missing internal secret"));
//                }));

------------------------------------------------------------------------------------------------------------------------

//        return Mono.fromSupplier(() -> tokenGenerator.generate(INTERNAL_JWT_TOKEN))
//                .filter(token -> token != null && !token.trim().isBlank() && !token.isEmpty())
//                .switchIfEmpty(Mono.error(new EmptyTokenException("Generated empty system token")))
//                .doOnNext(token -> log.info("Generated internal system token: {}", token))
//                .doOnError(error -> log.error("Error during system token generation", error));

------------------------------------------------------------------------------------------------------------------------

//    @Bean
//    protected SecurityWebFilterChain securityWebFilterChain(ServerHttpSecurity http, MeterRegistry registry,
//                                                            InternalSecretProperties properties) {
//        http
//                .csrf(csrf -> csrf.requireCsrfProtectionMatcher(customCsrfMatcher()))
//                .cors(cors -> cors.configurationSource(corsConfigurationSource()))
//                .authorizeExchange(exchanges -> exchanges
//                        .pathMatchers(PUBLIC_URLS)
//                            .permitAll()
//                        .pathMatchers(
//                                "/api/v1/user/account/register/**",
//                                "/api/v1/user/account/activate/**",
//                                "/api/internal/security/system/token",
//                                "/api/v1/secure/local/system-token",
//                                "/.well-known/jwks.json"
//                        )
//                            .permitAll()
//                        .pathMatchers("/api/internal/security/hash-password",
//                                "/api/internal/security/user-token/email/issue")
//                                .hasAnyAuthority("ROLE_SYSTEM", "DO_INTERNAL_TASKS")
//                        .anyExchange()
//                            .authenticated()
//                )
//                .addFilterBefore(new InternalTokenSecretFilter(registry, properties), SecurityWebFiltersOrder.AUTHENTICATION)
//                .addFilterAt(new InternalTokenAuthenticationFilter(jwtTokenValidator), SecurityWebFiltersOrder.AUTHENTICATION)
//                .oauth2ResourceServer(oauth2 -> oauth2
//                        .jwt(jwt -> jwt
//                                .jwtAuthenticationConverter(jwtAuthenticationConverter())));
//        return http.build();
//    }

//    @Bean
//    protected CorsConfigurationSource corsConfigurationSource() {
//        CorsConfiguration configuration = new CorsConfiguration();
//        configuration.setAllowedOrigins(List.of(
//                "/api/v1/secure/local/system-token",
//                "/api/internal/security/system/token",
//                "/api/internal/security/jwt/generate",
//                "/api/internal/security/jwt/validate",
//                "/api/internal/security/password/hash",
//                "/api/internal/security/password/validate",
//                "/api/internal/security/user-token/email/issue",
//                "/api/internal/security/user-token/email/validate",
//                "/api/internal/security/user-token/password-reset/issue",
//                "/api/internal/security/user-token/password-reset/validate",
//                "/api/internal/security/token/invalidate",
//                "/api/internal/security/authorize",
//                // notification
//                "/api/notification/email-verification",
//                "/api/notification/password-reset", "/api/notification/welcome-email"
//        ));
//        configuration.setAllowedMethods(List.of());
//        configuration.setAllowedHeaders(List.of());
//        configuration.setAllowCredentials(true);
//
//        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
//        source.registerCorsConfiguration("/**", configuration);
//        return source;
//    }

//    private ServerWebExchangeMatcher customCsrfMatcher() {
//        List<ServerWebExchangeMatcher> matchers = Arrays.stream(CSRF_IGNORE)
//                .map(PathPatternParserServerWebExchangeMatcher::new)
//                .collect(Collectors.toList());
//
//        OrServerWebExchangeMatcher customMatcher = new OrServerWebExchangeMatcher(matchers);
//
//        return exchanger -> customMatcher.matches(exchanger)
//                .flatMap(result -> result.isMatch() ?
//                        ServerWebExchangeMatcher.MatchResult.notMatch() :
//                        ServerWebExchangeMatcher.MatchResult.match());
//    }

//    private Converter<Jwt, Mono<AbstractAuthenticationToken>> jwtAuthenticationConverter() {
//        JwtGrantedAuthoritiesConverter  jwtGrantedAuthoritiesConverter = new JwtGrantedAuthoritiesConverter();
//        jwtGrantedAuthoritiesConverter.setAuthoritiesClaimName("authorities");
//        jwtGrantedAuthoritiesConverter.setAuthorityPrefix("");
//
//        JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();
//        jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(jwtGrantedAuthoritiesConverter);
//        jwtAuthenticationConverter.setPrincipalClaimName("sub");
//        return new ReactiveJwtAuthenticationConverterAdapter(jwtAuthenticationConverter);
//    }

------------------------------------------------------------------------------------------------------------------------

        Optional<UserToken> userTokenOptional = userTokenRepository.findByToken(token);
        if (userTokenOptional.isEmpty()) {
            log.error(LogConstants.TOKEN_NOT_FOUND);
            return false;
        }

        UserToken userToken = userTokenOptional.get();
        if (!userToken.getTokenPurpose().equals(purpose)) {
            log.error(LogConstants.INVALID_TOKEN_PURPOSE);
            return false;
        }

        if (!userToken.getTokenState().equals(PENDING)) {
            log.error(LogConstants.INVALID_TOKEN_STATE);
            return false;
        }

        if (userToken.getExpirationDate().before(new Date())) {
            log.error(LogConstants.EXPIRED_TOKEN);
            return false;
        }

        try {
            final Key key = tokenSigningKeyManager.getSigningCredentials(type).key();
            tokenClaimsExtractor.extractAllClaims(token, key);
            log.info(LogConstants.TOKEN_VALIDATION_SUCCESS);
            return true;
        } catch (SecurityException | MalformedJwtException ex) {
            log.error(LogConstants.INVALID_TOKEN_SIGNATURE, ex);
        } catch (ExpiredJwtException ex) {
            log.error(LogConstants.EXPIRED_TOKEN, ex);
        } catch (UnsupportedJwtException ex) {
            log.error(LogConstants.UNSUPPORTED_TOKEN, ex);
        } catch (IllegalArgumentException ex) {
            log.error(LogConstants.VALIDATION_FAILED, ex);
        }
        return false;
    }

------------------------------------------------------------------------------------------------------------------------

