//    @Bean
//    protected ReactiveJwtAuthenticationConverter jwtAuthenticationConverter() {
//        ReactiveJwtAuthenticationConverter converter = new ReactiveJwtAuthenticationConverter();
//        converter.setJwtGrantedAuthoritiesConverter(jwt -> {
//            List<String> authorities = jwt.getClaimAsStringList("authorities");
//            if (authorities == null || authorities.isEmpty()) {
//                return Flux.empty();
//            }
//            return Flux.fromIterable(authorities.stream()
//                    .map(role -> role.startsWith("ROLE_") ? role : "ROLE_" + role)
//                    .map(SimpleGrantedAuthority::new)
//                    .toList());
//        });
//        return converter;
//    }

------------------------------------------------------------------------------------------------------------------------

                            .permitAll()
                        .pathMatchers("/api/security/web/hash-password")
                                .authenticated()
//                            .access((mono, _) -> mono
//                                    .map(auth -> auth
//                                            .getAuthorities().stream()
//                                            .anyMatch(grantedAuthority ->
//                                                    grantedAuthority.getAuthority().equals("ROLE_SYSTEM") ||
//                                                    grantedAuthority.getAuthority().equals("DO_INTERNAL_TASKS")))
//                                    .map(AuthorizationDecision::new))

------------------------------------------------------------------------------------------------------------------------

//        String authHeader = exchange.getRequest().getHeaders().getFirst(AUTHORIZATION);
//        if (authHeader ==  null || !authHeader.startsWith("Bearer ")) {
//            return chain.filter(exchange);
//        }
//
//            String token = authHeader.substring(7);
//            return jwtTokenValidator.validateInternalToken(token)
//                    .flatMap(jwt -> {
//                        log.info("Authenticating service: {}",  jwt.getSubject());
//                        log.info("Authorities: {}", (Object) jwt.getClaim("authorities"));
//                        return chain.filter(exchange);
//                    })
//                    .onErrorResume(error -> {
//                        log.error("Authentication failed: {}", error.getMessage());
//                        exchange.getResponse().setStatusCode(UNAUTHORIZED);
//                        return exchange.getResponse().setComplete();
//                    });

------------------------------------------------------------------------------------------------------------------------